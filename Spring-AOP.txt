2020.02.12
Spring AOP (Aspect Oriented Programming)
 - AOP 는 Aspect Oriented Programming 의 약자로 "관점 지향 프로그래밍"이라고 불린다.
 - 관점 지향이란 어떤 로직을 기준으로 핵심적인 관점, 부가적인 관점으로 나누어서 보고 그 관점을 기준으로 각각 모듈화하겠다는 것.
 - 모듈화란 어떤 공통된 로직이나 기능을 하나의 단위로 묶는 것.
 - 핵심적인 관점은 개발자가 적용하고자 하는 핵심 비즈니스 로직이 된다.
 - 부가적인 관점은 핵심 로직을 실행하기 위해서 행해지는 데이터베이스 연결, 로깅, 파일 입출력 등이 포함된다.
 
AOP 주요 개념
 - Aspect : 흩어진 관심사들을 모듈화 한 것, 주로 부가기능을 모듈화한다.
 - Target : Aspect 를 적용하는 곳(Class, Method, ...)
 - Advice : 실질적으로 어떤 일을 해야할 지에 대한 것, 실질적인 부가기능을 담은 구현체
 - JoinPoint : Advice 가 적용될 위치, 끼어들 수 있는 지점, 메서드 진입 지점, 생성사 호출 지점, 필드에서 값을 꺼내올 때 등
               다양한 시점에서 적용 가능하다.
 - PointCut : JoinPoint 의 상세한 스펙을 정의한 것, "A 메서드의 진입 시점에 호출할 것" 과 같이 더욱 구체적으로
              Advice 가 실행될 지점을 정할 수 있다.
              
AOP 특징
 - 프록시 패턴 기반의 AOP 구현체, 프록시 객체를 쓰는 이유는 접근 제어 및 부가기능을 추가하기 위해서 사용한다.
 - Spring Bean 에서만 AOP 를 적용 가능하다.
 - 모든 AOP 기능을 제공하는 것이 아닌 Spring IoC 와 연동하여 Enterprise Application 에서 가장 흔한 문제(중복 코드,
   프록시 클래스 작성의 번거로움, 객체들 간 관계 복잡도 증가, ...)에 대한 해결책을 지원하는 것이 목적

Spring AOP : @AOP
 - @Component : 해당 클래스를 Spring Bean 으로 등록한다.
 - @Around : 타겟 메서드를 감싸서 특정 Advice 를 실행한다.
 
  @Component
  @Aspect
  public Class TestAspect {

    @Around("execution(* com.saelobi..*.EventService.*(..))")
    public Object logPerf(ProceedingJoinPoint pjp) throws Throwable {

      long begin = System.currentTimeMillis();
      Object retVal = pjp.proceed();    // 메서드 호출 자체를 감쌈
      System.out.println("▶▶▶ 소요 시간 : " + System.currentTimeMillis() - begin);

      return retVal;
    }
  }
 - 위에 Advice 는 타겟 메서드가 실행된 시간을 측정하기 위한 로직이다. 추가적으로 execution(* com.saelobi..*.EventService.*(..))
   가 의미하는 것은 EventService 객체의 모든 메서드에 해당 Aspect 를 적용하겠다는 의미이다.
   
  public interface EventService {
  
   void createEvent();
   void publishEvent();
   void deleteEvent();
  }
  
  @Component
  public class SimpleEventService implements EventService {
  
    @Override
    public void createEvent() {
    
      try{
        Thread.sleep(1000);
      }catch(Exception e) {
        e.printStackTrance();
      }
      System.out.println("Created An Event");
    }
    
    @Override
    public void publishEvent() {
    
      try{
        Thread.sleep(1000);
      }catch(Exception e) {
        e.printStackTrance();
      }
      System.out.println("Published An Event");
    }
    
    @Override
    public void deleteEvent() {
    
      System.out.println("Delete An Event");
    }
  }
  
  @Service
  public class AppRunner implements ApplicationRunner {
  
    @Autowired
    EventService eventService;
    
    @Override
    public void run(ApplicationArgments args) throws Exception {
    
      eventService.createEvent();
      eventService.publishEvent();
      eventService.deleteEvent();
    }
  }
  
출력 결과 :
Created An Event
▶▶▶ 소요시간 : 1003
Published An Event
▶▶▶ 소요시간 : 1000
Delete An Event
▶▶▶ 소요시간 : 0

pom.xml
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-aop</artifactId>
</dependency>

root-context.xml
<aop:aspectj-autoproxy />  //프록시  설정

출처: https://engkimbs.tistory.com/746 [새로비]
