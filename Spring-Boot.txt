2020.01.30
STS(Spring Tool Suite) 3.X / 4.X
 - 3.X : Spring MVC 형태, 즉 View 또한 하나의 프로젝트에서 관리하게 된다면 STS3.X 버전을 사용하는 것이 효과적이다.
 - 4.X : 최신 트렌드처럼 Front 를 React / Vue 로 처리하고, Back-End 를 Spring-Boot 로 데이터만 REST API 형태로 구성할 경우 효과적이다.
 
Spring-Boot
 - Spring-Boot 는 단독실행되는, 실행하기만 하면 되는 상용화 가능한 수준의 Spring 기반의 애플리케이션을 쉽게 만들어낼 수 있다.
 - 최소한의 설정으로 Spring Platform 과 Third Party Library 를 사용할 수 있도록 한다.
   *하드웨어 생산자는 First Party, 소프트웨어 개발자는 Third Party 라고 불리며,
    하드웨어 생산자가 직접 소프트웨어를 개발하는 경우 First Party,
    하드웨어 생산자인 모기업과 자사간의 관계에서의 소프트웨어 개발자를 Second Party,
    하드웨어 생산자와 직접적인 관계없이 소프트웨러를 개발하는 경우 Third Party 라고 한다.
    
Spring-Boot 기능
 - 단독실행 가능한 Spring Application 을 생성한다.
 - 내장형 톰캣, 제티 혹은 언더토우를 내장 ( WAR 파일로 배포할 경우에는 필요X )
 - 기본설정되어 있는 'starter' 컴포넌트들을 쉽게 추가
 - 가능한 자동설정되어 있다.
 - 상용화에 필요한 통계, 상태 점검 및 외부설정을 제공한다.
 - 설정을 위한 XML 코드를 생성하거나 요구하지 않는다.

REST API
 - Representational State Transfer 의 약자로써, 자원을 이름으로 구분하여 해당 자원의 상태를 주고 받는 모든 것을 의미한다.
 - JSON 혹은 XML 를 통해 데이터를 주고 받는 것이 일반적이다.
 - 월드 와이드 웹( WWW )과 같은 분산 하이퍼미디어 시스템을 위한 소프트웨어 개발 아키텍처의 한 형식이다.
 - REST 는 기본적으로 웹의 기존 기술과 HTTP 프로토콜을 그대로 활용하기 때문에 웹의 장점을 최대한 활용할 수 있는 아키텍처 스타일이다.
 - REST 는 Network 상에서 Client 와 Server 사이의 통신 방식 중 하나이다.
 
REST API 장점
 - HTTP 프로토콜의 인프라를 그대로 사용하므로 REST API 사용을 위한 별도의 인프라 구축 X
 - HTTP 프로토콜의 표준을 최대한 활용하여 여러 추가적인 장점을 함께 가져갈 수 있도록 해준다.
 - 여러가지 서비스 디자인에서 생길 수 있는 문제를 최소화한다.
 - Client 와 Server 의 역할을 명확하게 분리한다.

REST API 단점
 - 표준이 존재하지 않는다.
 - 사용할 수 있는 메서드가 4가지 밖에 없다.
 - 브라우저를 통해 테스트할 일이 많은 서비스라면 쉽게 고칠 수 있는 URL 보다 Header 값이 더 어렵게 느껴질 수 있다.
 - 구형 브라우저가 아직 제대로 지원해주지 못하는 부분이 존재한다.

REST API 가 필요한 이유
 - 애플리케이션의 분리 및 통합
 - 다양한 클라이언트의 등장
 - 최근의 Server Program 은 다양한 브라우저와 안드로이드폰/아이폰 과 같은 모바일 디바이스에서도 통신을 할 수 있어야 한다.
