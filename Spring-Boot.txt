2020.01.30
STS(Spring Tool Suite) 3.X / 4.X
 - 3.X : Spring MVC 형태, 즉 View 또한 하나의 프로젝트에서 관리하게 된다면 STS3.X 버전을 사용하는 것이 효과적이다.
 - 4.X : 최신 트렌드처럼 Front 를 React / Vue 로 처리하고, Back-End 를 Spring-Boot 로 데이터만 REST API 형태로 구성할 경우 효과적이다.
 
Spring-Boot
 - Spring-Boot 는 단독실행되는, 실행하기만 하면 되는 상용화 가능한 수준의 Spring 기반의 애플리케이션을 쉽게 만들어낼 수 있다.
 - 최소한의 설정으로 Spring Platform 과 Third Party Library 를 사용할 수 있도록 한다.
   *하드웨어 생산자는 First Party, 소프트웨어 개발자는 Third Party 라고 불리며,
    하드웨어 생산자가 직접 소프트웨어를 개발하는 경우 First Party,
    하드웨어 생산자인 모기업과 자사간의 관계에서의 소프트웨어 개발자를 Second Party,
    하드웨어 생산자와 직접적인 관계없이 소프트웨러를 개발하는 경우 Third Party 라고 한다.
    
Spring-Boot 기능
 - 단독실행 가능한 Spring Application 을 생성한다.
 - 내장형 톰캣, 제티 혹은 언더토우를 내장 ( WAR 파일로 배포할 경우에는 필요X )
 - 기본설정되어 있는 'starter' 컴포넌트들을 쉽게 추가
 - 가능한 자동설정되어 있다.
 - 상용화에 필요한 통계, 상태 점검 및 외부설정을 제공한다.
 - 설정을 위한 XML 코드를 생성하거나 요구하지 않는다.

REST API
 - Representational State Transfer 의 약자로써, 자원을 이름으로 구분하여 해당 자원의 상태를 주고 받는 모든 것을 의미한다.
 - JSON 혹은 XML 를 통해 데이터를 주고 받는 것이 일반적이다.
 - 월드 와이드 웹( WWW )과 같은 분산 하이퍼미디어 시스템을 위한 소프트웨어 개발 아키텍처의 한 형식이다.
 - REST 는 기본적으로 웹의 기존 기술과 HTTP 프로토콜을 그대로 활용하기 때문에 웹의 장점을 최대한 활용할 수 있는 아키텍처 스타일이다.
 - REST 는 Network 상에서 Client 와 Server 사이의 통신 방식 중 하나이다.
 
REST API 장점
 - HTTP 프로토콜의 인프라를 그대로 사용하므로 REST API 사용을 위한 별도의 인프라 구축 X
 - HTTP 프로토콜의 표준을 최대한 활용하여 여러 추가적인 장점을 함께 가져갈 수 있도록 해준다.
 - 여러가지 서비스 디자인에서 생길 수 있는 문제를 최소화한다.
 - Client 와 Server 의 역할을 명확하게 분리한다.

REST API 단점
 - 표준이 존재하지 않는다.
 - 사용할 수 있는 메서드가 4가지 밖에 없다.
 - 브라우저를 통해 테스트할 일이 많은 서비스라면 쉽게 고칠 수 있는 URL 보다 Header 값이 더 어렵게 느껴질 수 있다.
 - 구형 브라우저가 아직 제대로 지원해주지 못하는 부분이 존재한다.

REST API 가 필요한 이유
 - 애플리케이션의 분리 및 통합
 - 다양한 클라이언트의 등장
 - 최근의 Server Program 은 다양한 브라우저와 안드로이드폰/아이폰 과 같은 모바일 디바이스에서도 통신을 할 수 있어야 한다.

REST API 특징
 - Server-Client (서버-클라이언트 구조)
   - REST Server : API 를 제공하고 비즈니스 로직 처리 및 저장을 담당한다.
   - Client : 사용자 인증이나 context(세션, 로그인 정보)등을 직접 관리하고 담당한다.
   - 서로 간 의존성이 줄어든다.
 - Stateless (무상태)
   - HTTP 프로토콜은 Stateless Protocol 이므로 REST 역시 무상태성을 갖는다.
   - Client 의 context 를 Server 에 저장하지 않는다.
   - Server 는 각각의 요청을 완전히 별개의 것으로 인식하고 처리한다.
 - Casheable (캐시 처리 가능)
   - 웹 표준 HTTP 프로토콜을 그대로 사용하므로 웹에서 사용하는 기존의 인프라를 그대로 활용할 수 있다.
   - 대량의 요청을 효율적으로 처리하기 위해 캐시가 요구된다.
   - 캐시 사용을 통해 응답시간이 빨라지고 REST Server 트랜잭션이 발생하지 않기 때문에
     전체 응답시간, 성능, 서버의 자원 이용률을 향상시킬 수 있다.
 - Layered System (계층화)
   - Client 는 REST API Server 만 호출한다.
   - REST Server 는 다중 계층으로 구성될 수 있다.
   - PROXY, 게이트웨이 같은 네트워크 기반의 중간 매체를 이용할 수 있다.
 - Code-On-Demand
   - Server 로부터 스크립트를 받아서 Client에서 실행한다.
   - 반드시 충족할 필요는 없다.
 - Uniform Interface
   - URL 로 지정한 Resource 에 대한 조작을 통일되고 한정적인 인터페이스로 수행한다.
   - HTTP 표준 프로토콜에 따르는 모든 플랫폼에서 사용이 가능하다.


RESTFull
 - 일반적으로 REST 라는 아키텍처를 구현하는 웹 서비스를 나타내기 위해 사용되는 용어이다.
   - 'REST API' 를 제공하는 웹 서비스를 'RESTFull' 하다고 할 수 있다.
 
RESTFull 의 목적
 - 이해하기 쉽고 사용하기 쉬운 REST API 를 만드는 것
 - RESTFull 한 API 를 구현하는 근본적인 목적이 성능 향상에만 있는 것이 아니라 일관적인 컨벤션을 통한
   API 의 이해도 및 호환성을 높이는 것이 주 목적이다. 성능이 중요한 상황에서는 굳이 RESTFull 한 API 를 구현할 필요 없다.
 
RESTFull 하지 못한 경우
 - CRUD 기능을 모두 POST 방식으로만 처리하는 API
 - route(경로)에 resource, id 외의 정보가 들어가 있는 경우 (/students/updateName) 
   
   
   
