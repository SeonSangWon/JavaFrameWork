AOP 등장 배경
- 프로그래밍할 때 공통 기능을 모든 모듈에 적용하기위한 방법으로 상속을 통한 방법이 있지만 "다중 상속이 불가"하다.
- AOP방법은 "핵심 기능과 공통기능을 분리"해놓고, 공통 기능을 필요로 하는 핵심 기능들에서 사용하는 방식

AOP란??
- Aspect Oriented Programming(관점 지향 프로그래밍)으로 기능을 "비즈니스 기능과 공통 기능으로 구분"하고,
  현재 로직에 영향을 미치지 않고 사이사이에 공통기능을 효과적으로 끼워넣도록 하는 개발 방법
  (핵심 기능에 공통 기능을 삽입하는 것)
public void add() {
	//로그
	//시간체크 Start
	//예외처리
	//------------------------<< 공통기능

	//비즈니스 로직 부분
	//------------------------<< 핵심기능

	//시간체크 End
	//------------------------<< 공통기능
}

※스프링 DI가 의존성(new)에 대한 주입이라면 스프링 AOP는 로직(code) 주입이라고 할 수 있다.

AOP 용어
- Aspect : 공통기능 [Spring은 Proxy를 이용해서 메서드 호출 시점에 Aspect를 적용]
- Advice : Aspect의 기능 자체 [공통 관심 기능을 언제 핵심 로직에 적용할 지를 정의]
- JoinPoint : 핵심기능으로써 Aspect 적용 가능한 모든 지점 [Proxy를 이용해서 AOP를 구현하기 때문에 JoinPoint만 지원한다.]
- PointCut : JoinPoint의 상세 스펙 정의, Advice가 적용될 위치
- Weaving : Advice를 핵심 기능에 적용하는 행위
- Around : 타겟 메서드를 감싸서 Advice를 실행

특징 
- 프록시 패턴 기반의 AOP 구현체, 프록시 객체를 쓰는 이유는 "접근 제어 및 부가기능을 추가"하기 위해서이다.
- Spring Bean에서만 AOP 적용 가능.
- Spring Ioc와 연동하여 중복코드, 객체들 간의 복잡도 증가등에 대한 해결책을 지원하는 것이 목적

-----------------------------------------------------------------------------------------------------------------------------------------------------------
@Autowired
- 자동으로 의존 주입
- Spring에서 제공
- 타입으로 연결하며 없을 경우 이름으로 연결
	@Autowired
	private Car hiCar;	//타입으로 연결하기 때문에 Car로 연결된다.

@Inject
- 자동으로 의존 주입
- Java에서 제공
- 타입으로 연결하며 없을 경우 이름으로 연결 (@Autowired와 다른점 : Bean간의 주입 시, 대상이 없을 경우 Exception 발생)
	@Inject
	private Car hiCar	//타입으로 연결하기 때문에 Car로 연결된다.

@Resource
- 자동으로 의존 주입
- Java에서 제공
- 이름으로 연결하며 없을 경우 타입으로 연결
	@Resource
	private Car hiCar	//이름으로 연결하기 때문에 hiCar로 연결된다.

-----------------------------------------------------------------------------------------------------------------------------------------------------------
HTTP 프로토콜은 Connectionless Protocol로 "서버의 부하를 줄일 수 있는 장점"
- 웹 브라우저의 요청 시 마다 새로운 연결을 생성하는 단점

>>> 이러한 Connectionless Protocol의 불편함을 해결하귀 이해 Session과 Cookie를 이용

Session과 Cookie는 웹 브라우저와 서버의 연결 상태를 유지해주는 방법
- Session : 서버에서 연결정보를 관리
- Cookie : 클라이언트에서 연결정보를 관리
※Srping MVC에서 Session을 사용하려면 HttpServletRequest를 선언
※HttpServletReqest와 HttpSession의 차이점은 없으며, 단지 Session 객체를 얻는 방법에 차이가 있다.

HttpServletRequest : request를 받은 후, getSession()으로 세션을 얻음
HttpSession : 파라미터로 HttpSession을 받아 세션을 사용

Session
- getId() : Session ID를 반환
- setAttribute() : Session객체에 속성을 저장
- getAttribute() : Session객체에 저장된 속성을 저장
- removeAttribute() : Session객체에 저장된 속성을 제거

-----------------------------------------------------------------------------------------------------------------------------------------------------------
Web.xml 
- 각 어플리케이션의 환경을 설정하는 역할.
- Web Application Server가 최초 구동될 때(톰캣이 최초 구동될 때) web.xml을 읽고 그에 해당하는 설정을 구성한다. 
- DispatcherServlet : 
   - Spring Container를 생성
   - Controller의 Life-Cycle을 관리
   - 사용자 요청을 받고 요청을 Handler(Controller)에 보낸다.
   - HandlerMapping(어떤 url을 받을지 결정)
   - ViewResolver
- ContextLoaderListener
   - Bean을 포함하는 Spring Container를 생성
   - service-context.xml : Service관련
   - DAO-context.xml : DAO관련
   - applicationContext.xml : DataSource 관련, properties 등록, SessionFactory등
   - security-context.xml : Security 관련
- EncodingFilter

-----------------------------------------------------------------------------------------------------------------------------------------------------------
Model
- @RequestMapping이 적용된 메서드의 파라미터 리턴 타입으로 ModelAndView, Model, ModelMap, Map, 
   커멘드 객체, @ModelAttribute등을 이용해서 파라미터 값을 JSP에 전달
- model.addAttribute("번수 이름", "변수에 넣을 데이터 값");
- model.AddAllAttributes(Map<String, ?> attributes);
※Map에 포함된 <키, 값>에 대해 키를 모델 이름으로 사용해서 값을 모델로 추가

ModelAndView
- setViewName("뷰의 경로");
- addObject("변수이름", "변수에 넣을 데이터 값");

커멘드 객체
- 커맨드 객체를 사용하는 이유 : 데이터가 많을 경우에 대부분 사용한다.
- 특성 : 서비스와 DAO가 지나는 통로를 설정한다.

@ModelAttribute
- 커멘트 객체 앞에 @ModelAttribute 어노테이션을 이용한다.
public Sring method(@ModelAttribute("변수 이름" UserInfomation userInfomation){

	return "user/userInfo";
}

※@ModelAttribute 어노테이션이 적용된 메소드가 @RequestMapping 어노테이션이 적용된 메소드 보다 먼저 호출되기 때문에,
   객체에 대한 초기화 작업이 필요하다면 객체와 동일한 이름을 갖는 @ModelAttribute 어노테이션이 적용된 메소드를 이용.

-----------------------------------------------------------------------------------------------------------------------------------------------------------
웹 페이지 구동과정
1. 클라이언트 요청
2. web.xml에서 DispatcherServlet가 클라이언트의 요청을 핸들링
3. Servlet-context.xml에서 해당 클래스의 웹 요청을 처리하는 컨트롤러를 사용(RequestMapping으로 Controller를 검색)
4. 해당 Controller에서 요청을 처리 후, 리턴
5. Servlet-context.xml에서 jsp파일을 정의
6. View에 출력
